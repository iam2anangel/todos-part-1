{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["TodoItem","react_default","a","createElement","className","this","props","completed","type","checked","onClick","completeTodo","title","handleDeleteTodo","Component","TodoList","children","App","state","todos","todoList","handleDeleteCompletedTodos","event","newTodos","_this","filter","todo","setState","todoIdThatWasClicked","id","handleCompletedTodo","idUserClicked","map","_this2","placeholder","autoFocus","App_TodoList","App_TodoItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAIMA,mLAEF,OACEC,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,KAAKC,MAAMC,UAAY,YAAc,IAClDN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,SACVI,KAAK,WACLC,QAASJ,KAAKC,MAAMC,UACpBG,QAASL,KAAKC,MAAMK,eAEtBV,EAAAC,EAAAC,cAAA,aAAQE,KAAKC,MAAMM,OACnBX,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUM,QAASL,KAAKC,MAAMO,4BAZnCC,aAmBjBC,mLAEF,OAAOd,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAaC,KAAKC,MAAMU,iBAF1BF,aAuFRG,6MAhFbC,MAAQ,CAAEC,MAAOC,KAEjBC,2BAA6B,SAAAC,GAC3B,IAAMC,EAAWC,EAAKN,MAAMC,MAAMM,OAAO,SAAAC,GACvC,OAAuB,IAAnBA,EAAKnB,YAKXiB,EAAKG,SAAS,CACZR,MAAOI,OAIXV,iBAAmB,SAAAe,GAAoB,OAAI,SAAAN,GACzC,IAAMC,EAAWC,EAAKN,MAAMC,MAAMM,OAAO,SAAAC,GACvC,OAAIA,EAAKG,KAAOD,IAMlBJ,EAAKG,SAAS,CACZR,MAAOI,QAIXO,oBAAsB,SAAAC,GAAa,OAAI,SAAAT,GACrC,IAAMC,EAAWC,EAAKN,MAAMC,MAAMa,IAAI,SAAAN,GAIpC,OAHIA,EAAKG,KAAOE,IACdL,EAAKnB,WAAamB,EAAKnB,WAElBmB,IAGTF,EAAKG,SAAS,CACZR,MAAOI,8EAIF,IAAAU,EAAA5B,KACP,OACEJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,mBACAF,EAAAC,EAAAC,cAAA,SACEC,UAAU,WACV8B,YAAY,yBACZC,WAAS,KAIblC,EAAAC,EAAAC,cAAA,WAASC,UAAU,QACjBH,EAAAC,EAAAC,cAACiC,EAAD,KACG/B,KAAKa,MAAMC,MAAMa,IAAI,SAAAN,GAAI,OACxBzB,EAAAC,EAAAC,cAACkC,EAAD,CACEzB,MAAOc,EAAKd,MACZL,UAAWmB,EAAKnB,UAChBI,aAAcsB,EAAKH,oBAAoBJ,EAAKG,IAC5ChB,iBAAkBoB,EAAKpB,iBAAiBa,EAAKG,UAKrD5B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAChBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACdH,EAAAC,EAAAC,cAAA,mBADF,iBAGAF,EAAAC,EAAAC,cAAA,UACEC,UAAU,kBACVM,QAASL,KAAKgB,4BAFhB,4BArEQP,aCjBEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.09526b4a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport todoList from \"./todos.json\";\n\nclass TodoItem extends Component {\n  render() {\n    return (\n      <li className={this.props.completed ? \"completed\" : \"\"}>\n        <div className=\"view\">\n          <input\n            className=\"toggle\"\n            type=\"checkbox\"\n            checked={this.props.completed}\n            onClick={this.props.completeTodo}\n          />\n          <label>{this.props.title}</label>\n          <button className=\"destroy\" onClick={this.props.handleDeleteTodo} />\n        </div>\n      </li>\n    );\n  }\n}\n\nclass TodoList extends Component {\n  render() {\n    return <ul className=\"todo-list\">{this.props.children}</ul>;\n  }\n}\n\nclass App extends Component {\n  state = { todos: todoList };\n\n  handleDeleteCompletedTodos = event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.completed === true) {\n        return false;\n      }\n      return true;\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleDeleteTodo = todoIdThatWasClicked => event => {\n    const newTodos = this.state.todos.filter(todo => {\n      if (todo.id === todoIdThatWasClicked) {\n        return false;\n      }\n      return true;\n      //look for matched id todoIdThatWasClicked = todo.id\n    });\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  handleCompletedTodo = idUserClicked => event => {\n    const newTodos = this.state.todos.map(todo => {\n      if (todo.id === idUserClicked) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n    });\n\n    this.setState({\n      todos: newTodos\n    });\n  };\n\n  render() {\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            autoFocus\n            // addNewTodo={this.addNewTodo()}\n          />\n        </header>\n        <section className=\"main\">\n          <TodoList>\n            {this.state.todos.map(todo => (\n              <TodoItem\n                title={todo.title}\n                completed={todo.completed}\n                completeTodo={this.handleCompletedTodo(todo.id)}\n                handleDeleteTodo={this.handleDeleteTodo(todo.id)}\n              />\n            ))}\n          </TodoList>\n        </section>\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            <strong>0</strong> item(s) left\n          </span>\n          <button\n            className=\"clear-completed\"\n            onClick={this.handleDeleteCompletedTodos}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}